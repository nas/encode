/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenSale,
  TokenSaleInterface,
} from "../../../contracts/TokenSale.sol/TokenSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ratio",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burnNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAddress",
    outputs: [
      {
        internalType: "contract IMyNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ratio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "contract IMyToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200123b3803806200123b833981810160405281019062000037919062000262565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b836001819055508260028190555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002d4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d781620001c2565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022a82620001fd565b9050919050565b6200023c816200021d565b81146200024857600080fd5b50565b6000815190506200025c8162000231565b92915050565b600080600080608085870312156200027f576200027e620001bd565b5b60006200028f87828801620001e6565b9450506020620002a287828801620001e6565b9350506040620002b5878288016200024b565b9250506060620002c8878288016200024b565b91505092959194509250565b610f5780620002e46000396000f3fe6080604052600436106100c25760003560e01c806371ca337d1161007f5780639d76ea58116100595780639d76ea581461022e578063a035b1fe14610259578063d0febe4c14610284578063f2fde38b1461028e576100c2565b806371ca337d146101ad5780638da5cb5b146101d8578063951303f514610203576100c2565b80632890e0d7146100c75780632e1a7d4d146100f057806351ed8288146101195780635bf8633a146101425780636d1b229d1461016d578063715018a614610196575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610a52565b6102b7565b005b3480156100fc57600080fd5b5061011760048036038101906101129190610a52565b610402565b005b34801561012557600080fd5b50610140600480360381019061013b9190610a52565b6104ce565b005b34801561014e57600080fd5b5061015761062b565b6040516101649190610afe565b60405180910390f35b34801561017957600080fd5b50610194600480360381019061018f9190610a52565b610651565b005b3480156101a257600080fd5b506101ab610737565b005b3480156101b957600080fd5b506101c261074b565b6040516101cf9190610b28565b60405180910390f35b3480156101e457600080fd5b506101ed610751565b6040516101fa9190610b64565b60405180910390f35b34801561020f57600080fd5b5061021861077a565b6040516102259190610b28565b60405180910390f35b34801561023a57600080fd5b50610243610780565b6040516102509190610ba0565b60405180910390f35b34801561026557600080fd5b5061026e6107a6565b60405161027b9190610b28565b60405180910390f35b61028c6107ac565b005b34801561029a57600080fd5b506102b560048036038101906102b09190610be7565b61084a565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b81526004016103129190610b28565b600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600280546103919190610c72565b60025461039e9190610ca3565b6040518363ffffffff1660e01b81526004016103bb929190610cd7565b6020604051808303816000875af11580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610d38565b5050565b61040a6108cd565b806003600082825461041c9190610ca3565b92505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610469610751565b836040518363ffffffff1660e01b8152600401610487929190610cd7565b6020604051808303816000875af11580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190610d38565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b815260040161052f93929190610d65565b6020604051808303816000875af115801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610d38565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a144819433836040518363ffffffff1660e01b81526004016105d0929190610cd7565b600060405180830381600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b50505050600280546106109190610c72565b600360008282546106219190610d9c565b9250508190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b81526004016106ae929190610cd7565b600060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc600154836107089190610c72565b9081150290604051600060405180830381858888f19350505050158015610733573d6000803e3d6000fd5b5050565b61073f6108cd565b610749600061094b565b565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933600154346107f99190610dd0565b6040518363ffffffff1660e01b8152600401610816929190610cd7565b600060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b50505050565b6108526108cd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b890610e95565b60405180910390fd5b6108ca8161094b565b50565b6108d5610a0f565b73ffffffffffffffffffffffffffffffffffffffff166108f3610751565b73ffffffffffffffffffffffffffffffffffffffff1614610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090610f01565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610a2f81610a1c565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b600060208284031215610a6857610a67610a17565b5b6000610a7684828501610a3d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ac4610abf610aba84610a7f565b610a9f565b610a7f565b9050919050565b6000610ad682610aa9565b9050919050565b6000610ae882610acb565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b610b2281610a1c565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b6000610b4e82610a7f565b9050919050565b610b5e81610b43565b82525050565b6000602082019050610b796000830184610b55565b92915050565b6000610b8a82610acb565b9050919050565b610b9a81610b7f565b82525050565b6000602082019050610bb56000830184610b91565b92915050565b610bc481610b43565b8114610bcf57600080fd5b50565b600081359050610be181610bbb565b92915050565b600060208284031215610bfd57610bfc610a17565b5b6000610c0b84828501610bd2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7d82610a1c565b9150610c8883610a1c565b925082610c9857610c97610c14565b5b828204905092915050565b6000610cae82610a1c565b9150610cb983610a1c565b9250828203905081811115610cd157610cd0610c43565b5b92915050565b6000604082019050610cec6000830185610b55565b610cf96020830184610b19565b9392505050565b60008115159050919050565b610d1581610d00565b8114610d2057600080fd5b50565b600081519050610d3281610d0c565b92915050565b600060208284031215610d4e57610d4d610a17565b5b6000610d5c84828501610d23565b91505092915050565b6000606082019050610d7a6000830186610b55565b610d876020830185610b55565b610d946040830184610b19565b949350505050565b6000610da782610a1c565b9150610db283610a1c565b9250828201905080821115610dca57610dc9610c43565b5b92915050565b6000610ddb82610a1c565b9150610de683610a1c565b9250828202610df481610a1c565b91508282048414831517610e0b57610e0a610c43565b5b5092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e7f602683610e12565b9150610e8a82610e23565b604082019050919050565b60006020820190508181036000830152610eae81610e72565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610eeb602083610e12565b9150610ef682610eb5565b602082019050919050565b60006020820190508181036000830152610f1a81610ede565b905091905056fea2646970667358221220e291651d6e62322cafa7405abf3079c1399d9e19c2d1e713bfae744bb87c820f64736f6c63430008110033";

type TokenSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSale__factory extends ContractFactory {
  constructor(...args: TokenSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ratio: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenSale> {
    return super.deploy(
      _ratio,
      _price,
      _tokenAddress,
      _nftAddress,
      overrides || {}
    ) as Promise<TokenSale>;
  }
  override getDeployTransaction(
    _ratio: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ratio,
      _price,
      _tokenAddress,
      _nftAddress,
      overrides || {}
    );
  }
  override attach(address: string): TokenSale {
    return super.attach(address) as TokenSale;
  }
  override connect(signer: Signer): TokenSale__factory {
    return super.connect(signer) as TokenSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSaleInterface {
    return new utils.Interface(_abi) as TokenSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSale {
    return new Contract(address, _abi, signerOrProvider) as TokenSale;
  }
}
